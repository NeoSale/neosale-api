#!/usr/bin/env node

/**
 * Script para verificar e iniciar o Docker automaticamente
 * Funciona em Windows, macOS e Linux
 */

const { exec, spawn } = require('child_process');
const os = require('os');

class DockerManager {
  constructor() {
    this.platform = os.platform();
    console.log(`üê≥ Verificando Docker no ${this.platform}...`);
  }

  /**
   * Verifica se o Docker est√° rodando
   */
  async isDockerRunning() {
    return new Promise((resolve) => {
      exec('docker info', (error, stdout, stderr) => {
        if (error) {
          console.log('‚ùå Docker n√£o est√° rodando ou n√£o est√° instalado');
          resolve(false);
        } else {
          console.log('‚úÖ Docker est√° rodando');
          resolve(true);
        }
      });
    });
  }

  /**
   * Inicia o Docker baseado no sistema operacional
   */
  async startDocker() {
    console.log('üöÄ Tentando iniciar o Docker...');
    
    return new Promise((resolve, reject) => {
      let command;
      let args = [];
      
      switch (this.platform) {
        case 'win32':
          // Windows - usa o script PowerShell dedicado
          command = 'powershell';
          args = ['-ExecutionPolicy', 'Bypass', '-File', 'scripts/start-docker.ps1'];
          break;
          
        case 'darwin':
          // macOS - tenta iniciar Docker Desktop
          command = 'open';
          args = ['-a', 'Docker'];
          break;
          
        case 'linux':
          // Linux - tenta iniciar o servi√ßo docker
          command = 'sudo';
          args = ['systemctl', 'start', 'docker'];
          break;
          
        default:
          reject(new Error(`Sistema operacional ${this.platform} n√£o suportado`));
          return;
      }
      
      const process = spawn(command, args, { stdio: 'inherit' });
      
      process.on('close', (code) => {
        if (code === 0) {
          console.log('‚úÖ Comando de inicializa√ß√£o do Docker executado');
          resolve(true);
        } else {
          console.log(`‚ùå Falha ao executar comando (c√≥digo: ${code})`);
          reject(new Error(`Falha ao iniciar Docker (c√≥digo: ${code})`));
        }
      });
      
      process.on('error', (error) => {
        console.error('‚ùå Erro ao executar comando:', error.message);
        reject(error);
      });
    });
  }

  /**
   * Aguarda o Docker ficar dispon√≠vel
   */
  async waitForDocker(maxAttempts = 30, interval = 2000) {
    console.log('‚è≥ Aguardando Docker ficar dispon√≠vel...');
    
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      console.log(`üîÑ Tentativa ${attempt}/${maxAttempts}`);
      
      if (await this.isDockerRunning()) {
        console.log('üéâ Docker est√° pronto!');
        return true;
      }
      
      if (attempt < maxAttempts) {
        console.log(`‚è±Ô∏è  Aguardando ${interval/1000}s antes da pr√≥xima tentativa...`);
        await new Promise(resolve => setTimeout(resolve, interval));
      }
    }
    
    throw new Error('Timeout: Docker n√£o ficou dispon√≠vel no tempo esperado');
  }

  /**
   * Processo principal
   */
  async run() {
    try {
      // Verifica se j√° est√° rodando
      if (await this.isDockerRunning()) {
        console.log('üéØ Docker j√° est√° rodando!');
        return true;
      }
      
      // Tenta iniciar
      await this.startDocker();
      
      // Aguarda ficar dispon√≠vel
      await this.waitForDocker();
      
      return true;
      
    } catch (error) {
      console.error('üí• Erro:', error.message);
      console.log('\nüìã Instru√ß√µes manuais:');
      
      switch (this.platform) {
        case 'win32':
          console.log('   ‚Ä¢ Abra o Docker Desktop manualmente');
          console.log('   ‚Ä¢ Ou execute: "Docker Desktop.exe"');
          break;
          
        case 'darwin':
          console.log('   ‚Ä¢ Abra o Docker Desktop do Launchpad');
          console.log('   ‚Ä¢ Ou execute: open -a Docker');
          break;
          
        case 'linux':
          console.log('   ‚Ä¢ Execute: sudo systemctl start docker');
          console.log('   ‚Ä¢ Ou: sudo service docker start');
          break;
      }
      
      console.log('   ‚Ä¢ Verifique se o Docker est√° instalado corretamente');
      
      process.exit(1);
    }
  }
}

// Executa se chamado diretamente
if (require.main === module) {
  const dockerManager = new DockerManager();
  dockerManager.run();
}

module.exports = DockerManager;